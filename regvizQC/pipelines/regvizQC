#!/usr/bin/env python
""" regvizQC

Python CLI for creating gifs/svgs for quick, qualitative assessment of
registered images.

"""

def get_parser():
    """
    Argument parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter
    from regvizQC._version import __version__

    parser = ArgumentParser(description="Pipeline to create gifs/svg for "
                                        "qualitative assessment of registered "
                                        "images",
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument("-v", "--version", dest="version",
                        action="version", version=__version__)

    # Required arguments
    g_req = parser.add_argument_group("Required arguments")
    g_req.add_argument("fixed_img", help="Fixed image")
    g_req.add_argument("moving_img", help="Moving image")
    g_req.add_argument("mask", help="Mask of interest")

    g_opt = parser.add_argument_group("Optional arguments")
    g_opt.add_argument("-c", "--cuts", dest="cuts", default=7,
                       help="Number of slices to evaluate")
    g_opt.add_argument("-o", "--out_dir", dest="out_dir",
                       help="Output directory. Defaults to current directory")
    g_opt.add_argument("-w", "--work_dir", dest="work_dir",
                       help="Working directory. Defaults to current directory")

    return parser

def main():
    """
    Entry point of code
    """
    import os
    import os.path as op

    from nipype import config, logging
    from nipype.pipeline import engine as pe
    from regvizQC.interfaces import viz

    args = get_parser().parse_args()

    # Required inputs
    fixed_img = args.fixed_img
    moving_img = args.moving_img
    mask = args.mask

    # Optional inputs
    cuts = int(args.cuts)

    # Set work & crash directories
    if args.work_dir:
        work_dir = op.realpath(args.work_dir)
        crash_dir = op.join(op.realpath(args.work_dir), "crash")
    else:
        work_dir = op.join(os.getcwd(), "work")
        crash_dir = op.join(os.getcwd(), "crash")

    if not op.exists(work_dir):
        os.makedirs(work_dir)
    if not op.exists(crash_dir):
        os.makedirs(crash_dir)

    if args.out_dir:
        out_dir = op.realpath(args.out_dir)
    else:
        out_dir = op.join(os.getcwd(), "regvizQC")

    if not op.exists(out_dir):
        os.makedirs(out_dir)

    config.update_config({'logging': {'log_directory': work_dir,
                                      'log_to_file': True,
                                      },
                          'execution': {'crashdump_dir': crash_dir,
                                        'crashfile_format': 'txt'
                                        }})
    logging.update_logging(config)

    regImg = pe.Node(viz.RegistrationInterface(), name='RegImage')
    regImg.base_dir = work_dir
    regImg.inputs.fixed_img = fixed_img
    regImg.inputs.moving_img = moving_img
    regImg.inputs.mask_img = mask
    regImg.inputs.cuts = cuts
    regImg.output_dir = out_dir
    regImg.run()


if __name__ == '__main__':
    main()
